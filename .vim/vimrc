" execute pathogen#infect()
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')
" The default plugin directory will be as follows:
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" Project drawers
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-fugitive'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-airline/vim-airline'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()

" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting
let mapleader=","           "Changes Leader key into a comma instead of a backslash
set nocompatible            "Prefents VIM from being nerfed into acting like VI
set viminfo='1000,f1,:1000,/1000
set history=500

au FileType php set omnifunc=phpcomplete#CompletePHP

"------  Visual Options  ------
"colorscheme darcula
"colorscheme solarized
"colorscheme onedark
set background=dark
set guioptions=egmt         "remove toolbar, scrollbars
syntax on                   "Enables syntax highlighting
syntax enable               " Turn on syntax highlights

set nu                      "Enable Line Numbers
nnoremap <F4> :set nonumber!<cr>
set nowrap                  "Disable word wrap
"set vb                      "Visual bell instead of beeps
set ruler                   "Displays cursor position on bottom right of screen

" Set the status line
set laststatus=2
" Broken down into easily includeable segments
set statusline=%<%f\    " Filename
set statusline+=%w%h%m%r " Options
set statusline+=%{fugitive#statusline()} "  Git Hotness
set statusline+=\ [%{&ff}/%Y]            " filetype
set statusline+=\ [%{getcwd()}]          " current dir
set statusline+=%#warningmsg#
set statusline+=%*
set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
let g:syntastic_enable_signs=1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:buftabs_only_basename=1
let g:buftabs_marker_modified = "+"
" Map <F5> to turn spelling on (VIM 7.0+)
map <F5> :setlocal spell! spelllang=en_us<cr>

" Map <F6> to undo tree
map <F6> :UndotreeToggle<cr>
" kind of like vim's swap. let's not clutter our cwd with the undo tree stuffs
if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif


"------  Behavior  ------
set expandtab               "Use spaces instead of tabs
set tabstop=8               "width of a hard tabstop measured in spaces"
set softtabstop=4           "tab = 4 spaces
set shiftwidth=4            "Indent to four spaces
set hidden                  "Switch between unsaved buffers w/o needing to save, preserves history
filetype indent on          "Syntax Highlight
filetype plugin on          "Needed for snipMate
set autoindent              "Autoindent

"Ignore these files when completing names
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,node_modules/*

"------ Special Case Highlighting -------
au BufNewFile,BufRead *.ejs set filetype=html
au BufNewFile,BufRead *.less set filetype=css

"------  Searching  ------
set incsearch               "Search while typing
set smartcase               "Lowercase = case insensitive, any uppercase = case sensitive
set hlsearch                "Highlight all search results
"Following line clears the search highlights when pressing Lb
nnoremap <leader>b :nohlsearch<CR>
" http://www.vim.org/scripts/script.php?script_id=2572
noremap <leader>a :Ack
noremap <leader>A <C-w>j<C-w>c<C-w>l
let g:ackprg="ack -H --nocolor --nogroup --column --type-add php=.tpl"

"------  Replacing ------
"type S, then type what you're looking for, a /, and what to replace it with
nmap S :%s//g<LEFT><LEFT>
vmap S :s//g<LEFT><LEFT>

"------  Buffers  ------
" Ctrl Left & Right move between buffers
noremap <silent> <C-left> :bprev<CR>
noremap <silent> <C-h> :bprev<CR>
noremap <silent> <C-right> :bnext<CR>
noremap <silent> <C-l> :bnext<CR>
" Tab and Shift tab as well.
noremap <Tab> :bnext<CR>
noremap <S-Tab> :bprevious<CR>
" Closes the current buffer
nnoremap <silent> <Leader>q :Bclose<CR>

"---- Splits -----
nnoremap <leader>j <C-W><C-J>
nnoremap <leader>k <C-W><C-K>
nnoremap <leader>l <C-W><C-L>
nnoremap <leader>h <C-W><C-H>

"---- Tab nav ---"
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
" Alternatively use
"nnoremap th :tabnext<CR>
"nnoremap tl :tabprev<CR>
"nnoremap tn :tabnew<CR>

if filereadable($HOME.'/.vimrc_local')
    source $HOME/.vimrc_local
endif

" Prevent * from moving forward to second match on first search.
noremap * *``

" Use system clipboard"
set clipboard+=unnamedplus

" No search highlighting
set nohlsearch

" python-mode
let g:pymode_folding = 0
" Disable pymodes colorcolumn, as we're defining our own
let g:pymode_options_colorcolumn = 0

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

" markdown
" let g:vim_markdown_folding_disabled = 1

"latex
let g:tex_flavor='latex'

"use ag instead of ack
let g:ackprg = 'ag --nogroup --nocolor --column'

"black config
let g:black_skip_string_normalization = 1
let g:black_linelength = 100

" strip trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" add  powerline fonts to airline
 let g:airline_powerline_fonts = 1

 " ignore warning from coc about older nvim
 let g:coc_disable_startup_warning = 1


 " use <tab> to trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
